paths:
  /Customers:
    post:
      tags:
        - Customer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Customer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    patch:
      tags:
        - Customer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Customer.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    put:
      tags:
        - Customer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Customer.replaceOrCreate__put_Customers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    get:
      tags:
        - Customer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Customer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/replaceOrCreate:
    post:
      tags:
        - Customer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Customer.replaceOrCreate__post_Customers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/upsertWithWhere:
    post:
      tags:
        - Customer
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Customer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  '/Customers/{id}/exists':
    get:
      tags:
        - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Customer.exists__get_Customers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Customers/{id}':
    head:
      tags:
        - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Customer.exists__head_Customers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Customer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Customer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    put:
      tags:
        - Customer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Customer.replaceById__put_Customers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    delete:
      tags:
        - Customer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Customer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Customer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Customer.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  '/Customers/{id}/replace':
    post:
      tags:
        - Customer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Customer.replaceById__post_Customers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/findOne:
    get:
      tags:
        - Customer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Customer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/update:
    post:
      tags:
        - Customer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Customer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Customers/count:
    get:
      tags:
        - Customer
      summary: Count instances of the model matched by where from the data source.
      operationId: Customer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /realestateAssets:
    post:
      tags:
        - realestateAsset
      summary: Create a new instance of the model and persist it into the data source.
      operationId: realestateAsset.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
    patch:
      tags:
        - realestateAsset
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: realestateAsset.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
    put:
      tags:
        - realestateAsset
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: realestateAsset.replaceOrCreate__put_realestateAssets
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
    get:
      tags:
        - realestateAsset
      summary: Find all instances of the model matched by filter from the data source.
      operationId: realestateAsset.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/realestateAsset'
      deprecated: false
  /realestateAssets/replaceOrCreate:
    post:
      tags:
        - realestateAsset
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: realestateAsset.replaceOrCreate__post_realestateAssets_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
  /realestateAssets/upsertWithWhere:
    post:
      tags:
        - realestateAsset
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: realestateAsset.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
  '/realestateAssets/{id}/exists':
    get:
      tags:
        - realestateAsset
      summary: Check whether a model instance exists in the data source.
      operationId: 'realestateAsset.exists__get_realestateAssets_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/realestateAssets/{id}':
    head:
      tags:
        - realestateAsset
      summary: Check whether a model instance exists in the data source.
      operationId: 'realestateAsset.exists__head_realestateAssets_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - realestateAsset
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: realestateAsset.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
    put:
      tags:
        - realestateAsset
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'realestateAsset.replaceById__put_realestateAssets_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
    delete:
      tags:
        - realestateAsset
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: realestateAsset.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - realestateAsset
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: realestateAsset.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/realestateAsset'
        - name: id
          in: path
          description: realestateAsset id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
  '/realestateAssets/{id}/replace':
    post:
      tags:
        - realestateAsset
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'realestateAsset.replaceById__post_realestateAssets_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
  /realestateAssets/findOne:
    get:
      tags:
        - realestateAsset
      summary: Find first instance of the model matched by filter from the data source.
      operationId: realestateAsset.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/realestateAsset'
      deprecated: false
  /realestateAssets/update:
    post:
      tags:
        - realestateAsset
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: realestateAsset.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/realestateAsset'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /realestateAssets/count:
    get:
      tags:
        - realestateAsset
      summary: Count instances of the model matched by where from the data source.
      operationId: realestateAsset.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /VoiceMessages:
    post:
      tags:
        - VoiceMessage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: VoiceMessage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
    patch:
      tags:
        - VoiceMessage
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: VoiceMessage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
    put:
      tags:
        - VoiceMessage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: VoiceMessage.replaceOrCreate__put_VoiceMessages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
    get:
      tags:
        - VoiceMessage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: VoiceMessage.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/VoiceMessage'
      deprecated: false
  /VoiceMessages/replaceOrCreate:
    post:
      tags:
        - VoiceMessage
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: VoiceMessage.replaceOrCreate__post_VoiceMessages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
  /VoiceMessages/upsertWithWhere:
    post:
      tags:
        - VoiceMessage
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: VoiceMessage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
  '/VoiceMessages/{id}/exists':
    get:
      tags:
        - VoiceMessage
      summary: Check whether a model instance exists in the data source.
      operationId: 'VoiceMessage.exists__get_VoiceMessages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/VoiceMessages/{id}':
    head:
      tags:
        - VoiceMessage
      summary: Check whether a model instance exists in the data source.
      operationId: 'VoiceMessage.exists__head_VoiceMessages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - VoiceMessage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: VoiceMessage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
    put:
      tags:
        - VoiceMessage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'VoiceMessage.replaceById__put_VoiceMessages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
    delete:
      tags:
        - VoiceMessage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: VoiceMessage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - VoiceMessage
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: VoiceMessage.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VoiceMessage'
        - name: id
          in: path
          description: VoiceMessage id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
  '/VoiceMessages/{id}/replace':
    post:
      tags:
        - VoiceMessage
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'VoiceMessage.replaceById__post_VoiceMessages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
  /VoiceMessages/findOne:
    get:
      tags:
        - VoiceMessage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: VoiceMessage.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/VoiceMessage'
      deprecated: false
  /VoiceMessages/update:
    post:
      tags:
        - VoiceMessage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: VoiceMessage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/VoiceMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /VoiceMessages/count:
    get:
      tags:
        - VoiceMessage
      summary: Count instances of the model matched by where from the data source.
      operationId: VoiceMessage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Images:
    post:
      tags:
        - Image
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Image.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
    patch:
      tags:
        - Image
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Image.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
    put:
      tags:
        - Image
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Image.replaceOrCreate__put_Images
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
    get:
      tags:
        - Image
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Image.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
      deprecated: false
  /Images/replaceOrCreate:
    post:
      tags:
        - Image
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Image.replaceOrCreate__post_Images_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
  /Images/upsertWithWhere:
    post:
      tags:
        - Image
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Image.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
  '/Images/{id}/exists':
    get:
      tags:
        - Image
      summary: Check whether a model instance exists in the data source.
      operationId: 'Image.exists__get_Images_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Images/{id}':
    head:
      tags:
        - Image
      summary: Check whether a model instance exists in the data source.
      operationId: 'Image.exists__head_Images_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Image
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Image.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
    put:
      tags:
        - Image
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Image.replaceById__put_Images_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
    delete:
      tags:
        - Image
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Image.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Image
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Image.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Image'
        - name: id
          in: path
          description: Image id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
  '/Images/{id}/replace':
    post:
      tags:
        - Image
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Image.replaceById__post_Images_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
  /Images/findOne:
    get:
      tags:
        - Image
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Image.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Image'
      deprecated: false
  /Images/update:
    post:
      tags:
        - Image
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Image.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Image'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Images/count:
    get:
      tags:
        - Image
      summary: Count instances of the model matched by where from the data source.
      operationId: Image.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  Customer:
    properties:
      customerId:
        type: number
        format: double
      firstName:
        type: string
      lastName:
        type: string
      dob:
        type: string
        format: date-time
      mobileNumbers:
        type: array
        items:
          type: string
      emailIds:
        type: array
        items:
          type: string
      professions:
        type: array
        items:
          type: string
      aadharNumber:
        type: string
      searchTags:
        type: string
      shortDescription:
        type: string
      longDescription:
        type: string
    required:
      - customerId
      - firstName
      - lastName
    additionalProperties: false
  x-any:
    properties: {}
  realestateAsset:
    properties:
      video:
        type: array
        items:
          type: string
          format: byte
      assetId:
        type: number
        format: double
      buyPrice:
        type: number
        format: double
      currentMarketValue:
        type: array
        items:
          type: object
      customerId:
        type: number
        format: double
      dimensions:
        type: array
        items:
          type: object
      location:
        type: object
      longDescription:
        type: string
      searchTags:
        type: string
      sellPrice:
        type: number
        format: double
      shortDescription:
        type: string
      type:
        type: string
      voiceMessage:
        type: number
        format: double
      wantToSell:
        type: boolean
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - customerId
    additionalProperties: false
  VoiceMessage:
    properties:
      data:
        description: bson Data
        type: string
        format: byte
      msgId:
        type: number
        format: double
      custId:
        type: number
        format: double
      sourceId:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - msgId
    additionalProperties: false
  Image:
    properties:
      data:
        type: string
        format: byte
      imageId:
        type: number
        format: double
      custId:
        type: number
        format: double
      sourceId:
        type: number
        format: double
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - imageId
    additionalProperties: false
  ObjectID:
    type: string
    pattern: "^[a-fA-F\\d]{24}$"
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: townapp
  version: 1.0.0
  title: townapp
schemes:
  - http
host: 'localhost:3000'
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
